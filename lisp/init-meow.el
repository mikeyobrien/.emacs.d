;;; init-meow.el --- Meow modal editing -*- lexical-binding: t -*-

;;; Commentary:
;; Meow modal editing configuration

;;; Code:

(require 'init-hydras)

(use-package meow
  
  :demand t
  :init
  (unbind-key "C-c b")
  (unbind-key "C-c p")
  (unbind-key "C-c z")
  (unbind-key "C-c r")
  :config
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet)
     '("f f" . find-file)
     '("f r" . consult-recent-file)
     '("f s" . save-buffer)
     '("f D" . delete-file)
     '("f R" . rename-file)
     '("f c" . copy-file)
     '("b b" . consult-buffer)
     '("b k" . kill-buffer)
     '("b n" . next-buffer)
     '("b p" . previous-buffer)
     '("b i" . ibuffer)
     '("b r" . revert-buffer)
     '("h f" . helpful-callable)
     '("h v" . helpful-variable)
     '("h k" . helpful-key)
     '("h m" . describe-mode)
     '("u u" . vundo)
     '("B b" . bookmark-jump)
     '("B s" . bookmark-set)
     '("B l" . bookmark-bmenu-list)
     '("w w" . ace-window)
     '("w v" . split-window-right)
     '("w s" . split-window-below)
     '("w d" . delete-window)
     '("w o" . delete-other-windows)
     '("w u" . winner-undo)
     '("w U" . winner-redo)
     '("w ." . hydra-window/body)
     '("/" . consult-ripgrep)
     '("s s" . consult-line)
     '("s m" . consult-mark)
     '("p p" . projectile-switch-project)
     '("p a" . projectile-add-known-project)
     '("p f" . project-find-file)
     '("p t" . projectile-run-eat)
     '("p b" . consult-project-buffer)
     '("p s" . consult-ripgrep)
     '("p S" . consult-projectile)
     '("g g" . magit-status)
     '("o t" . eat)
     '("o e" . eshell)
     '("n a" . org-agenda)
     '("n c" . org-capture)
     '("n s" . mov/search-org)
     '("n n" . mov/open-org-notes)
     '("n r f" . org-roam-node-find)
     '("n r i" . org-roam-node-insert)
     '("n r l" . org-roam-buffer-toggle)
     '("n r d t" . org-roam-dailies-capture-today)
     '("z z" . hydra-zoom/body)
     '("r r" . hydra-rectangle/body)
     '("r s" . copy-to-register)
     '("r i" . insert-register)
     '("q q" . save-buffers-kill-terminal)
     '("q r" . restart-emacs)
     '("q R" . reload-emacs-config))
    (define-prefix-command 'mov/localleader-map)
    (meow-leader-define-key '("m" . mov/localleader-map))
    (with-eval-after-load 'org
      (defvar mov/localleader-org-map
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "t") #'org-todo)
          (define-key map (kbd "s") #'org-schedule)
          (define-key map (kbd "d") #'org-deadline)
          (define-key map (kbd "r") #'org-refile)
          (define-key map (kbd "A") #'org-archive-subtree)
          (define-key map (kbd "l") #'org-insert-link)
          (define-key map (kbd "e") #'org-export-dispatch)
          (define-key map (kbd "b") #'org-insert-structure-template)
          map)
        "Localleader map for Org buffers.")
      (add-hook 'org-mode-hook
                (lambda ()
                  (setq-local mov/localleader-map mov/localleader-org-map))))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("{" . scroll-down-command)
     '("}" . scroll-up-command)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("/" . consult-line)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))
  (meow-setup)
  (setq meow-cursor-type-insert '(bar . 2)
        meow-cursor-type-normal 'box)
  (meow-setup-indicator)
  (add-hook 'meow-insert-mode-hook (lambda () (setq cursor-type '(bar . 2))))
  (add-hook 'meow-normal-mode-hook (lambda () (setq cursor-type 'box)))
  (meow-global-mode 1)
  
  ;; Terminal integration - use insert mode by default
  (add-to-list 'meow-mode-state-list '(eat-mode . insert))
  (add-to-list 'meow-mode-state-list '(vterm-mode . insert))
  (add-to-list 'meow-mode-state-list '(term-mode . insert))
  (add-to-list 'meow-mode-state-list '(eshell-mode . insert)))

(provide 'init-meow)

;;; init-meow.el ends here
